import os, io, json, html
from PIL import Image
import streamlit as st
from google import genai
from google.genai import errors

# ===================== Mobile-first config & CSS =====================
st.set_page_config(page_title="‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏£‡∏á‡∏ú‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", page_icon="‚úÇÔ∏è", layout="wide")

MOBILE_CSS = """
<style>
html, body, [class*="css"]  { font-size: 18px; }
div.block-container { padding-top: 0.8rem; padding-bottom: 3rem; }

.stButton>button {
  width: 100%;
  padding: 0.9rem 1.1rem;
  font-size: 1.1rem;
  border-radius: 14px;
}

.result-card {
  border-radius: 16px;
  padding: 1rem 1.1rem;
  margin-top: 0.5rem;
  border: 1px solid rgba(0,0,0,0.08);
  box-shadow: 0 2px 10px rgba(0,0,0,0.06);
}
.badge {
  display:inline-block;
  padding: 0.2rem 0.6rem;
  border-radius: 999px;
  font-weight: 600;
  font-size: 0.95rem;
  color: #fff;
}
.badge-ok { background: #16a34a; }       /* compliant */
.badge-no { background: #dc2626; }       /* non_compliant */
.badge-unsure { background: #f59e0b; }   /* unsure */

[data-testid="stCameraInputLabel"] { font-size: 1.05rem; }
textarea, input, .stTextInput input { font-size: 1rem !important; }
details > summary { font-size: 1.0rem; }
</style>
"""
st.markdown(MOBILE_CSS, unsafe_allow_html=True)

# ===================== Default rules & schema hint =====================
RULE_TEXT = """\
‡∏Å‡∏é‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ó‡∏£‡∏á‡∏ú‡∏° (‡∏ä‡∏≤‡∏¢):
1) ‡∏£‡∏≠‡∏á‡∏ó‡∏£‡∏á‡∏™‡∏π‡∏á ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á/‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏±‡πâ‡∏ô
2) ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ã‡∏°.
3) ‡∏´‡πâ‡∏≤‡∏°‡∏¢‡πâ‡∏≠‡∏°/‡∏î‡∏±‡∏î/‡πÑ‡∏ß‡πâ‡∏´‡∏ô‡∏ß‡∏î‡πÄ‡∏Ñ‡∏£‡∏≤
"""

SCHEMA_HINT = """\
‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ï‡∏≤‡∏°‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤:
{
  "verdict": "compliant | non_compliant | unsure",
  "reasons": ["string"],
  "violations": [{"code":"STRING","message":"STRING"}],
  "confidence": 0.0,
  "meta": {"student_id":"STRING","rule_set_id":"default-v1","timestamp":"AUTO"}
}
"""

# ===================== Utils =====================
def esc(s: object) -> str:
    """HTML-escape ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô st.markdown(unsafe_allow_html=True)"""
    return html.escape(str(s), quote=True)

def verdict_badge(verdict: str) -> str:
    mp = {
        "compliant": ("‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö", "badge-ok"),
        "non_compliant": ("‡∏ú‡∏¥‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö", "badge-no"),
        "unsure": ("‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à", "badge-unsure"),
    }
    label, css = mp.get(verdict, ("‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à", "badge-unsure"))
    return f'<span class="badge {css}">{label}</span>'

def compress_for_network(img: Image.Image, mime: str) -> bytes:
    """‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô/‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÄ‡∏ô‡πá‡∏ï) ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á MIME ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
    img = img.copy()
    img.thumbnail((1024, 1024))
    buf = io.BytesIO()
    if mime == "image/png":
        img.save(buf, format="PNG", optimize=True)
    else:
        img.save(buf, format="JPEG", quality=85, optimize=True)
    return buf.getvalue()

# ===================== Gemini Caller (with retry & fallback) =====================
def call_gemini(image_bytes: bytes, mime: str, student_id: str, rules: str, retries: int = 2):
    # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡∏≤ API key: st.secrets -> ENV
    api_key = None
    try:
        api_key = st.secrets.get("GEMINI_API_KEY")
    except Exception:
        pass
    api_key = api_key or os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("GEMINI_API_KEY not set (set in Secrets or environment).")

    client = genai.Client(api_key=api_key)

    prompt = f"""
SYSTEM:
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏£‡∏á‡∏ú‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô

USER:
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á‡∏ú‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢):
{rules}

{SCHEMA_HINT}

‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á: ‡∏´‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î ‡πÉ‡∏´‡πâ verdict="unsure" ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
student_id = {student_id or "UNKNOWN"}
rule_set_id = "default-v1"
"""

    last_err = None
    for i in range(retries):
        try:
            resp = client.models.generate_content(
                model="gemini-2.5-flash",
                contents=[{
                    "role": "user",
                    "parts": [
                        {"text": prompt},
                        {"inline_data": {"mime_type": mime, "data": image_bytes}}
                    ]
                }],
            )
            text = (resp.text or "").strip()
            s, e = text.find("{"), text.rfind("}")
            return json.loads(text[s:e+1])
        except errors.ServerError as e:
            last_err = e
            if "503" in str(e) and i < retries - 1:
                st.toast("‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏≠‡∏±‡∏î (503) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‚Ä¶", icon="‚è≥")
                import time; time.sleep(2 * (i + 1))
                continue
            break
        except Exception as e:
            last_err = e
            break

    return {
        "verdict": "unsure",
        "reasons": [f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•: {last_err}"],
        "violations": [],
        "confidence": 0.0,
        "meta": {"student_id": student_id or "UNKNOWN", "rule_set_id": "default-v1"}
    }

# ===================== UI =====================
st.markdown("### ‚úÇÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏£‡∏á‡∏ú‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Gemini (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠)")

colA, colB = st.columns([1, 1])
with colA:
    student_id = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", placeholder="‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á", label_visibility="visible")
with colB:
    auto_analyze = st.toggle("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢", value=True)

with st.expander("‡∏Å‡∏é‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö (‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)"):
    rules = st.text_area("RULES", RULE_TEXT, height=120)

st.caption("‚Ä¢ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå ‚Ä¢ ‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‚Ä¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏£‡∏á‡∏ú‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")
photo = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á")

if "last_result" not in st.session_state:
    st.session_state.last_result = None

if photo:
    try:
        img = Image.open(photo).convert("RGB")
        mime = photo.type if photo.type in ("image/png", "image/jpeg") else "image/jpeg"
        st.image(img, caption="‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", use_container_width=True)

        c1, c2 = st.columns(2)
        with c1:
            do_analyze = st.button("üîé ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", use_container_width=True) or (auto_analyze and st.session_state.last_result is None)
        with c2:
            clear = st.button("üóëÔ∏è ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà/‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•", use_container_width=True)

        if clear:
            st.session_state.last_result = None
            st.rerun()

        if do_analyze:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‚Ä¶"):
                image_bytes = compress_for_network(img, mime)
                st.session_state.last_result = call_gemini(
                    image_bytes, mime=mime, student_id=student_id, rules=rules
                )

    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: {e}")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
if st.session_state.last_result:
    r = st.session_state.last_result
    verdict = r.get("verdict", "unsure")
    reasons = r.get("reasons", []) or []
    violations = r.get("violations", []) or []
    conf = r.get("confidence", 0.0)
    meta = r.get("meta", {}) or {}

    st.markdown(
        f"""
        <div class="result-card">
          <div style="display:flex;justify-content:space-between;align-items:center;gap:8px;flex-wrap:wrap;">
            <div style="font-weight:700;font-size:1.05rem;">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</div>
            <div>{verdict_badge(verdict)}</div>
          </div>
          <div style="margin-top:6px;color:#475569;">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: <b>{conf:.2f}</b></div>
          <hr style="opacity:.1;margin:10px 0;">
          <div style="font-weight:600;margin-bottom:6px;">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</div>
          <ul style="margin-top:0;">
            {''.join(f'<li>{esc(x)}</li>' for x in reasons)}
          </ul>
          {"<div style='font-weight:600;margin-top:8px;'>‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö</div><ul>" + ''.join(f"<li>{esc(v.get('message',''))}</li>" for v in violations) + "</ul>" if violations else ""}
          <div style="margin-top:6px;color:#64748b;">‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: <b>{esc(meta.get('student_id','-'))}</b> ‚Ä¢ ‡∏ä‡∏∏‡∏î‡∏Å‡∏é: <b>{esc(meta.get('rule_set_id','default-v1'))}</b></div>
        </div>
        """,
        unsafe_allow_html=True
    )

st.markdown(
    """
    <div style="margin-top:1.2rem;color:#64748b;font-size:0.95rem;">
      ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ô‡∏¥‡πà‡∏á, ‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏á‡∏´‡∏ô‡πâ‡∏≤-‡∏Ç‡πâ‡∏≤‡∏á, ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    </div>
    """,
    unsafe_allow_html=True
)
