# app.py
import os, io, json, html, time
from PIL import Image
import streamlit as st
from google import genai
from google.genai import errors

# ===================== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô & ‡∏ò‡∏µ‡∏°‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ =====================
st.set_page_config(page_title="‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏£‡∏á‡∏ú‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", page_icon="‚úÇÔ∏è", layout="wide")

MOBILE_CSS = """
<style>
/* ‡∏ê‡∏≤‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ */
html, body, [class*="css"]  { font-size: 18px; }
div.block-container { padding-top: 0.6rem; padding-bottom: 2.4rem; }

/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */
.hint-bar {
  background: #f1f5f9;
  border: 1px solid #e2e8f0;
  border-radius: 14px;
  padding: 0.8rem 1rem;
  margin-bottom: 0.8rem;
  color: #0f172a;
}

/* ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å */
.stButton > button {
  width: 100%;
  padding: 0.95rem 1.1rem;
  font-size: 1.12rem;
  font-weight: 700;
  border-radius: 14px;
}
.btn-primary { background: #2563eb !important; color:#fff !important; border: none !important; }
.btn-secondary { background: #e2e8f0 !important; color:#0f172a !important; border: none !important; }

/* ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */
.result-card {
  border-radius: 16px;
  padding: 1rem 1.1rem;
  margin-top: 0.6rem;
  border: 1px solid rgba(0,0,0,0.08);
  box-shadow: 0 2px 10px rgba(0,0,0,0.06);
  background: #fff;
}
.badge {
  display:inline-block;
  padding: 0.2rem 0.66rem;
  border-radius: 999px;
  font-weight: 700;
  font-size: 0.98rem;
  color: #fff;
}
.badge-ok { background: #16a34a; }       /* ‡∏ú‡πà‡∏≤‡∏ô */
.badge-no { background: #dc2626; }       /* ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô */
.badge-unsure { background: #f59e0b; }   /* ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à */

/* ‡∏Å‡∏•‡πâ‡∏≠‡∏á/label ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î */
[data-testid="stCameraInputLabel"] { font-size: 1.05rem; }

/* ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å/textarea ‡πÉ‡∏´‡∏ç‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡πâ‡∏ß */
textarea, input, .stTextInput input { font-size: 1rem !important; }

/* ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô */
.btn-row { display:flex; gap:12px; }
.btn-row > div { flex:1; }

/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• */
.result-list { margin: 0.4rem 0 0 1rem; }
</style>
"""
st.markdown(MOBILE_CSS, unsafe_allow_html=True)

# ===================== ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° =====================
DEFAULT_RULES = """\
‡∏Å‡∏é‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ó‡∏£‡∏á‡∏ú‡∏° (‡∏ä‡∏≤‡∏¢)
1) ‡∏£‡∏≠‡∏á‡∏ó‡∏£‡∏á‡∏™‡∏π‡∏á ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á/‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏±‡πâ‡∏ô
2) ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ã‡∏°.
3) ‡∏´‡πâ‡∏≤‡∏°‡∏¢‡πâ‡∏≠‡∏°/‡∏î‡∏±‡∏î/‡πÑ‡∏ß‡πâ‡∏´‡∏ô‡∏ß‡∏î‡πÄ‡∏Ñ‡∏£‡∏≤
"""

SCHEMA_HINT = """\
‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏ï‡∏≤‡∏°‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤:
{
  "verdict": "compliant | non_compliant | unsure",
  "reasons": ["string"],
  "violations": [{"code":"STRING","message":"STRING"}],
  "confidence": 0.0,
  "meta": {"student_id":"STRING","rule_set_id":"default-v1","timestamp":"AUTO"}
}
"""

# ===================== Utilities =====================
def esc(s: object) -> str:
    return html.escape(str(s), quote=True)

def verdict_badge(verdict: str) -> str:
    mp = {
        "compliant": ("‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö", "badge-ok"),
        "non_compliant": ("‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö", "badge-no"),
        "unsure": ("‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à", "badge-unsure"),
    }
    label, css = mp.get(verdict, ("‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à", "badge-unsure"))
    return f'<span class="badge {css}">{label}</span>'

def compress_image(img: Image.Image, mime: str) -> bytes:
    """‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÄ‡∏ô‡πá‡∏ï ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö MIME"""
    img = img.copy()
    img.thumbnail((1024, 1024))
    buf = io.BytesIO()
    if mime == "image/png":
        img.save(buf, format="PNG", optimize=True)
    else:
        img.save(buf, format="JPEG", quality=85, optimize=True)
    return buf.getvalue()

# ===================== ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini (‡∏û‡∏£‡πâ‡∏≠‡∏° retry ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô) =====================
def call_gemini(image_bytes: bytes, mime: str, student_id: str, rules: str, retries: int = 2):
    # ‡∏Ñ‡∏µ‡∏¢‡πå: st.secrets -> ENV
    api_key = None
    try:
        api_key = st.secrets.get("GEMINI_API_KEY")
    except Exception:
        pass
    api_key = api_key or os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GEMINI_API_KEY (Secrets/Env).")

    client = genai.Client(api_key=api_key)

    prompt = f"""
SYSTEM:
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏£‡∏á‡∏ú‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

USER (‡πÑ‡∏ó‡∏¢):
‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏Å‡∏é:
{rules}

{SCHEMA_HINT}

‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:
- ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î/‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏£‡∏á‡∏ú‡∏°‡∏û‡∏≠ ‡πÉ‡∏´‡πâ verdict="unsure" ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
- ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Ñ‡∏ß‡∏£‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
- meta.student_id = {student_id or "UNKNOWN"}
- meta.rule_set_id = "default-v1"
"""

    last_err = None
    for i in range(retries):
        try:
            resp = client.models.generate_content(
                model="gemini-2.5-flash",
                contents=[{
                    "role": "user",
                    "parts": [
                        {"text": prompt},
                        {"inline_data": {"mime_type": mime, "data": image_bytes}}
                    ]
                }],
            )
            text = (resp.text or "").strip()
            s, e = text.find("{"), text.rfind("}")
            return json.loads(text[s:e+1])
        except errors.ServerError as e:
            last_err = e
            if "503" in str(e) and i < retries - 1:
                st.toast("‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‚Ä¶", icon="‚è≥")
                time.sleep(2 * (i + 1))
                continue
            break
        except Exception as e:
            last_err = e
            break

    return {
        "verdict": "unsure",
        "reasons": [f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•: {last_err}"],
        "violations": [],
        "confidence": 0.0,
        "meta": {"student_id": student_id or "UNKNOWN", "rule_set_id": "default-v1"}
    }

# ===================== ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß & ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ =====================
st.markdown("### ‚úÇÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏£‡∏á‡∏ú‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô)")
st.markdown(
    """
    <div class="hint-bar">
      ‚úÖ <b>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÜ</b> ‚Äî ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‚Üí ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏£‡∏á‡∏ú‡∏°‡∏ä‡∏±‡∏î ‚Üí ‡∏Å‡∏î <b>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à</b><br>
      üí° <b>‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö</b> ‚Äî ‡∏à‡∏±‡∏î‡πÅ‡∏™‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠, ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ö‡∏±‡∏á‡∏´‡∏π, ‡∏´‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢<br>
      üîí <b>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</b> ‚Äî ‡∏†‡∏≤‡∏û‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ï‡πà‡∏≠
    </div>
    """,
    unsafe_allow_html=True
)

# ===================== ‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç (‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô) =====================
with st.expander("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏é‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)"):
    rules = st.text_area("‡∏Å‡∏é‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)", DEFAULT_RULES, height=120)
else:
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ç‡∏¢‡∏≤‡∏¢ expander ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if "rules_cache" not in st.session_state:
        st.session_state.rules_cache = DEFAULT_RULES
    rules = st.session_state.get("rules_cache", DEFAULT_RULES)

# ===================== ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡∏£‡∏´‡∏±‡∏™ + ‡∏Å‡∏•‡πâ‡∏≠‡∏á + ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô =====================
with st.form("capture_form", clear_on_submit=False):
    student_id = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)", placeholder="‡πÄ‡∏ä‡πà‡∏ô 68301430004")

    photo = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á")

    # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô, ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    c1, c2 = st.columns(2)
    with c1:
        submitted = st.form_submit_button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à", use_container_width=True)
    with c2:
        reset = st.form_submit_button("üóëÔ∏è ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà/‡∏•‡πâ‡∏≤‡∏á", use_container_width=True)

if reset:
    st.session_state.pop("last_result", None)
    st.rerun()

# ===================== ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô =====================
if submitted:
    if not photo:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î ‚Äú‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‚Äù")
    else:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        img = Image.open(photo).convert("RGB")
        mime = photo.type if photo.type in ("image/png", "image/jpeg") else "image/jpeg"
        st.image(img, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢", use_container_width=True)

        # ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
        prog = st.progress(0, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏†‡∏≤‡∏û‚Ä¶")
        image_bytes = compress_image(img, mime); prog.progress(40, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‚Ä¶")

        with st.spinner("‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‚Ä¶"):
            result = call_gemini(image_bytes, mime=mime, student_id=student_id, rules=rules)
        prog.progress(100, text="‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        st.toast("‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", icon="‚úÖ")

        st.session_state.last_result = result

# ===================== ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢) =====================
if st.session_state.get("last_result"):
    r = st.session_state["last_result"]
    verdict = r.get("verdict", "unsure")
    reasons = r.get("reasons", []) or []
    violations = r.get("violations", []) or []
    conf = r.get("confidence", 0.0)
    meta = r.get("meta", {}) or {}

    st.markdown(
        f"""
        <div class="result-card">
          <div style="display:flex;justify-content:space-between;align-items:center;gap:8px;flex-wrap:wrap;">
            <div style="font-weight:800;font-size:1.06rem;">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à</div>
            <div>{verdict_badge(verdict)}</div>
          </div>
          <div style="margin-top:6px;color:#475569;">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö: <b>{conf:.2f}</b></div>
          <hr style="opacity:.12;margin:12px 0;">
          <div style="font-weight:700;margin-bottom:6px;">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ</div>
          <ul class="result-list">
            {''.join(f'<li>{esc(x)}</li>' for x in reasons)}
          </ul>
          {"<div style='font-weight:700;margin-top:10px;'>‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö</div><ul class='result-list'>" + ''.join(f"<li>{esc(v.get('message',''))}</li>" for v in violations) + "</ul>" if violations else ""}
          <div style="margin-top:8px;color:#64748b;">‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: <b>{esc(meta.get('student_id','-'))}</b> ‚Ä¢ ‡∏ä‡∏∏‡∏î‡∏Å‡∏é: <b>{esc(meta.get('rule_set_id','default-v1'))}</b></div>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.divider()
    st.caption("‡∏ñ‡πâ‡∏≤‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô: ‡∏•‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏´‡∏π‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô")
